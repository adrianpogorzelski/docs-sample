{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sample documentation import os import platform import subprocess import sys import tarfile import zipfile import urllib.request PAGEFIND_DIR = \"pagefind\" VERSION = \"v1.3.0\" # Check if PageFind binary is already installed def is_installed(): return os.path.isfile(os.path.join(PAGEFIND_DIR, \"pagefind\")) # Detect processor architecture def get_architecture(): arch = platform.machine() return \"x86_64\" if arch in (\"AMD64\", \"x86_64\") else \"aarch64\" # Detect operating system def get_os(): os_name = platform.system() if os_name == \"Darwin\": return \"apple-darwin\" # MacOs elif os_name == \"Linux\": return \"unknown-linux-musl\" elif os_name.startswith(\"Windows\"): return \"pc-windows-msvc\" else: print(f\"Unsupported OS: {os_name}\") sys.exit(1) # Construct the correct PageFind download URL. def get_download_url(): arch = get_architecture() os_name = get_os() if \"windows\" in os_name: bin_name = f\"pagefind-{VERSION}-x86_64-{os_name}.zip\" else: bin_name = f\"pagefind-{VERSION}-{arch}-{os_name}.tar.gz\" url = f\"https://github.com/CloudCannon/pagefind/releases/download/{VERSION}/{bin_name}\" return url, bin_name # Download PageFind binary def download_pagefind(url, dest_path): print(f\"[INFO] Downloading PageFind from {url}...\") try: urllib.request.urlretrieve(url, dest_path) except Exception as e: print(f\"[ERROR] Download failed: {e}\") sys.exit(1) # Extract the downloaded PageFind archive def extract_pagefind(archive_path): print(\"[INFO] Extracting PageFind...\") if archive_path.endswith(\".zip\"): with zipfile.ZipFile(archive_path, \"r\") as zip_ref: zip_ref.extractall(PAGEFIND_DIR) else: with tarfile.open(archive_path, \"r:gz\") as tar_ref: tar_ref.extractall(PAGEFIND_DIR) os.chmod(os.path.join(PAGEFIND_DIR, \"pagefind\"), 0o755) # Make executable os.remove(archive_path) # Cleanup print(\"[SUCCESS] PageFind installed successfully!\") # Run the PageFind binary def run_pagefind(): try: print(\"[INFO] Running PageFind...\") subprocess.run([os.path.join(PAGEFIND_DIR, \"pagefind\")], check=True) print(\"[SUCCESS] PageFind ran successfully!\") except subprocess.CalledProcessError as e: print(f\"[ERROR] PageFind failed to run: {e}\") sys.exit(1) # Index pages for searching def index_pagefind(): print(\"[INFO] Indexing site with PageFind...\") try: subprocess.run([os.path.join(PAGEFIND_DIR, \"pagefind\"), \"index\", \"--site\", \"public\"], check=True) except subprocess.CalledProcessError as e: print(f\"[ERROR] Indexing failed: {e}\") sys.exit(1) # Main installation process def install_pagefind(): if is_installed(): print(\"[INFO] PageFind already configured.\") index_pagefind() return os.makedirs(PAGEFIND_DIR, exist_ok=True) url, bin_name = get_download_url() archive_path = os.path.join(PAGEFIND_DIR, \"pagefind_download\") download_pagefind(url, archive_path) extract_pagefind(archive_path) run_pagefind() if __name__ == \"__main__\": install_pagefind()","title":"Sample documentation"},{"location":"#sample-documentation","text":"import os import platform import subprocess import sys import tarfile import zipfile import urllib.request PAGEFIND_DIR = \"pagefind\" VERSION = \"v1.3.0\" # Check if PageFind binary is already installed def is_installed(): return os.path.isfile(os.path.join(PAGEFIND_DIR, \"pagefind\")) # Detect processor architecture def get_architecture(): arch = platform.machine() return \"x86_64\" if arch in (\"AMD64\", \"x86_64\") else \"aarch64\" # Detect operating system def get_os(): os_name = platform.system() if os_name == \"Darwin\": return \"apple-darwin\" # MacOs elif os_name == \"Linux\": return \"unknown-linux-musl\" elif os_name.startswith(\"Windows\"): return \"pc-windows-msvc\" else: print(f\"Unsupported OS: {os_name}\") sys.exit(1) # Construct the correct PageFind download URL. def get_download_url(): arch = get_architecture() os_name = get_os() if \"windows\" in os_name: bin_name = f\"pagefind-{VERSION}-x86_64-{os_name}.zip\" else: bin_name = f\"pagefind-{VERSION}-{arch}-{os_name}.tar.gz\" url = f\"https://github.com/CloudCannon/pagefind/releases/download/{VERSION}/{bin_name}\" return url, bin_name # Download PageFind binary def download_pagefind(url, dest_path): print(f\"[INFO] Downloading PageFind from {url}...\") try: urllib.request.urlretrieve(url, dest_path) except Exception as e: print(f\"[ERROR] Download failed: {e}\") sys.exit(1) # Extract the downloaded PageFind archive def extract_pagefind(archive_path): print(\"[INFO] Extracting PageFind...\") if archive_path.endswith(\".zip\"): with zipfile.ZipFile(archive_path, \"r\") as zip_ref: zip_ref.extractall(PAGEFIND_DIR) else: with tarfile.open(archive_path, \"r:gz\") as tar_ref: tar_ref.extractall(PAGEFIND_DIR) os.chmod(os.path.join(PAGEFIND_DIR, \"pagefind\"), 0o755) # Make executable os.remove(archive_path) # Cleanup print(\"[SUCCESS] PageFind installed successfully!\") # Run the PageFind binary def run_pagefind(): try: print(\"[INFO] Running PageFind...\") subprocess.run([os.path.join(PAGEFIND_DIR, \"pagefind\")], check=True) print(\"[SUCCESS] PageFind ran successfully!\") except subprocess.CalledProcessError as e: print(f\"[ERROR] PageFind failed to run: {e}\") sys.exit(1) # Index pages for searching def index_pagefind(): print(\"[INFO] Indexing site with PageFind...\") try: subprocess.run([os.path.join(PAGEFIND_DIR, \"pagefind\"), \"index\", \"--site\", \"public\"], check=True) except subprocess.CalledProcessError as e: print(f\"[ERROR] Indexing failed: {e}\") sys.exit(1) # Main installation process def install_pagefind(): if is_installed(): print(\"[INFO] PageFind already configured.\") index_pagefind() return os.makedirs(PAGEFIND_DIR, exist_ok=True) url, bin_name = get_download_url() archive_path = os.path.join(PAGEFIND_DIR, \"pagefind_download\") download_pagefind(url, archive_path) extract_pagefind(archive_path) run_pagefind() if __name__ == \"__main__\": install_pagefind()","title":"Sample documentation"}]}